//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/QuasarInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @QuasarInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @QuasarInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""QuasarInputActions"",
    ""maps"": [
        {
            ""name"": ""Touch1"",
            ""id"": ""34250d31-3dcf-45b3-8dfe-70d45fb717ab"",
            ""actions"": [
                {
                    ""name"": ""PullSling"",
                    ""type"": ""Button"",
                    ""id"": ""17ec1da4-9b72-4d99-bb5c-690e076990a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""22b922ba-5da5-4be3-8f2c-9af5930d4b65"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PullSling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch1
        m_Touch1 = asset.FindActionMap("Touch1", throwIfNotFound: true);
        m_Touch1_PullSling = m_Touch1.FindAction("PullSling", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch1
    private readonly InputActionMap m_Touch1;
    private List<ITouch1Actions> m_Touch1ActionsCallbackInterfaces = new List<ITouch1Actions>();
    private readonly InputAction m_Touch1_PullSling;
    public struct Touch1Actions
    {
        private @QuasarInputActions m_Wrapper;
        public Touch1Actions(@QuasarInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PullSling => m_Wrapper.m_Touch1_PullSling;
        public InputActionMap Get() { return m_Wrapper.m_Touch1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Touch1Actions set) { return set.Get(); }
        public void AddCallbacks(ITouch1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Touch1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Touch1ActionsCallbackInterfaces.Add(instance);
            @PullSling.started += instance.OnPullSling;
            @PullSling.performed += instance.OnPullSling;
            @PullSling.canceled += instance.OnPullSling;
        }

        private void UnregisterCallbacks(ITouch1Actions instance)
        {
            @PullSling.started -= instance.OnPullSling;
            @PullSling.performed -= instance.OnPullSling;
            @PullSling.canceled -= instance.OnPullSling;
        }

        public void RemoveCallbacks(ITouch1Actions instance)
        {
            if (m_Wrapper.m_Touch1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouch1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Touch1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Touch1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Touch1Actions @Touch1 => new Touch1Actions(this);
    public interface ITouch1Actions
    {
        void OnPullSling(InputAction.CallbackContext context);
    }
}
